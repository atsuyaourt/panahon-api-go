// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: station.sql

package db

import (
	"context"

	"github.com/emiliogozo/panahon-api-go/util"
	"github.com/jackc/pgx/v5/pgtype"
)

const createStation = `-- name: CreateStation :one
INSERT INTO observations_station (
  name,
  lat,
  lon,
  elevation,
  date_installed,
  mo_station_id,
  sms_system_type,
  mobile_number,
  station_type,
  station_type2,
  station_url,
  status,
  logger_version,
  priority_level,
  provider_id,
  province,
  region,
  address
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18
) RETURNING id, name, lat, lon, elevation, date_installed, mo_station_id, sms_system_type, mobile_number, station_type, station_type2, station_url, status, logger_version, priority_level, provider_id, province, region, address, created_at, updated_at, deleted_at
`

type CreateStationParams struct {
	Name          string          `json:"name"`
	Lat           util.NullFloat4 `json:"lat"`
	Lon           util.NullFloat4 `json:"lon"`
	Elevation     util.NullFloat4 `json:"elevation"`
	DateInstalled pgtype.Date     `json:"date_installed"`
	MoStationID   util.NullString `json:"mo_station_id"`
	SmsSystemType util.NullString `json:"sms_system_type"`
	MobileNumber  util.NullString `json:"mobile_number"`
	StationType   util.NullString `json:"station_type"`
	StationType2  util.NullString `json:"station_type2"`
	StationUrl    util.NullString `json:"station_url"`
	Status        util.NullString `json:"status"`
	LoggerVersion util.NullString `json:"logger_version"`
	PriorityLevel util.NullString `json:"priority_level"`
	ProviderID    util.NullString `json:"provider_id"`
	Province      util.NullString `json:"province"`
	Region        util.NullString `json:"region"`
	Address       util.NullString `json:"address"`
}

func (q *Queries) CreateStation(ctx context.Context, arg CreateStationParams) (ObservationsStation, error) {
	row := q.db.QueryRow(ctx, createStation,
		arg.Name,
		arg.Lat,
		arg.Lon,
		arg.Elevation,
		arg.DateInstalled,
		arg.MoStationID,
		arg.SmsSystemType,
		arg.MobileNumber,
		arg.StationType,
		arg.StationType2,
		arg.StationUrl,
		arg.Status,
		arg.LoggerVersion,
		arg.PriorityLevel,
		arg.ProviderID,
		arg.Province,
		arg.Region,
		arg.Address,
	)
	var i ObservationsStation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lat,
		&i.Lon,
		&i.Elevation,
		&i.DateInstalled,
		&i.MoStationID,
		&i.SmsSystemType,
		&i.MobileNumber,
		&i.StationType,
		&i.StationType2,
		&i.StationUrl,
		&i.Status,
		&i.LoggerVersion,
		&i.PriorityLevel,
		&i.ProviderID,
		&i.Province,
		&i.Region,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteStation = `-- name: DeleteStation :exec
DELETE FROM observations_station WHERE id = $1
`

func (q *Queries) DeleteStation(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteStation, id)
	return err
}

const getStation = `-- name: GetStation :one
SELECT id, name, lat, lon, elevation, date_installed, mo_station_id, sms_system_type, mobile_number, station_type, station_type2, station_url, status, logger_version, priority_level, provider_id, province, region, address, created_at, updated_at, deleted_at FROM observations_station
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStation(ctx context.Context, id int64) (ObservationsStation, error) {
	row := q.db.QueryRow(ctx, getStation, id)
	var i ObservationsStation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lat,
		&i.Lon,
		&i.Elevation,
		&i.DateInstalled,
		&i.MoStationID,
		&i.SmsSystemType,
		&i.MobileNumber,
		&i.StationType,
		&i.StationType2,
		&i.StationUrl,
		&i.Status,
		&i.LoggerVersion,
		&i.PriorityLevel,
		&i.ProviderID,
		&i.Province,
		&i.Region,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getStationByMobileNumber = `-- name: GetStationByMobileNumber :one
SELECT id, name, lat, lon, elevation, date_installed, mo_station_id, sms_system_type, mobile_number, station_type, station_type2, station_url, status, logger_version, priority_level, provider_id, province, region, address, created_at, updated_at, deleted_at FROM observations_station
WHERE mobile_number = $1 LIMIT 1
`

func (q *Queries) GetStationByMobileNumber(ctx context.Context, mobileNumber util.NullString) (ObservationsStation, error) {
	row := q.db.QueryRow(ctx, getStationByMobileNumber, mobileNumber)
	var i ObservationsStation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lat,
		&i.Lon,
		&i.Elevation,
		&i.DateInstalled,
		&i.MoStationID,
		&i.SmsSystemType,
		&i.MobileNumber,
		&i.StationType,
		&i.StationType2,
		&i.StationUrl,
		&i.Status,
		&i.LoggerVersion,
		&i.PriorityLevel,
		&i.ProviderID,
		&i.Province,
		&i.Region,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listStations = `-- name: ListStations :many
SELECT id, name, lat, lon, elevation, date_installed, mo_station_id, sms_system_type, mobile_number, station_type, station_type2, station_url, status, logger_version, priority_level, provider_id, province, region, address, created_at, updated_at, deleted_at FROM observations_station
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListStationsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStations(ctx context.Context, arg ListStationsParams) ([]ObservationsStation, error) {
	rows, err := q.db.Query(ctx, listStations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ObservationsStation{}
	for rows.Next() {
		var i ObservationsStation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Lat,
			&i.Lon,
			&i.Elevation,
			&i.DateInstalled,
			&i.MoStationID,
			&i.SmsSystemType,
			&i.MobileNumber,
			&i.StationType,
			&i.StationType2,
			&i.StationUrl,
			&i.Status,
			&i.LoggerVersion,
			&i.PriorityLevel,
			&i.ProviderID,
			&i.Province,
			&i.Region,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStation = `-- name: UpdateStation :one
UPDATE observations_station
SET
  name = COALESCE($1, name),
  lat = COALESCE($2, lat),
  lon = COALESCE($3, lon),
  elevation = COALESCE($4, elevation),
  date_installed = COALESCE($5, date_installed),
  mo_station_id = COALESCE($6, mo_station_id),
  sms_system_type = COALESCE($7, sms_system_type),
  mobile_number = COALESCE($8, mobile_number),
  station_type = COALESCE($9, station_type),
  station_type2 = COALESCE($10, station_type2),
  station_url = COALESCE($11, station_url),
  status = COALESCE($12, status),
  logger_version = COALESCE($13, logger_version),
  priority_level = COALESCE($14, priority_level),
  provider_id = COALESCE($15, provider_id),
  province = COALESCE($16, province),
  region = COALESCE($17, region),
  address = COALESCE($18, address),
  updated_at = now()
WHERE id = $19
RETURNING id, name, lat, lon, elevation, date_installed, mo_station_id, sms_system_type, mobile_number, station_type, station_type2, station_url, status, logger_version, priority_level, provider_id, province, region, address, created_at, updated_at, deleted_at
`

type UpdateStationParams struct {
	Name          util.NullString `json:"name"`
	Lat           util.NullFloat4 `json:"lat"`
	Lon           util.NullFloat4 `json:"lon"`
	Elevation     util.NullFloat4 `json:"elevation"`
	DateInstalled pgtype.Date     `json:"date_installed"`
	MoStationID   util.NullString `json:"mo_station_id"`
	SmsSystemType util.NullString `json:"sms_system_type"`
	MobileNumber  util.NullString `json:"mobile_number"`
	StationType   util.NullString `json:"station_type"`
	StationType2  util.NullString `json:"station_type2"`
	StationUrl    util.NullString `json:"station_url"`
	Status        util.NullString `json:"status"`
	LoggerVersion util.NullString `json:"logger_version"`
	PriorityLevel util.NullString `json:"priority_level"`
	ProviderID    util.NullString `json:"provider_id"`
	Province      util.NullString `json:"province"`
	Region        util.NullString `json:"region"`
	Address       util.NullString `json:"address"`
	ID            int64           `json:"id"`
}

func (q *Queries) UpdateStation(ctx context.Context, arg UpdateStationParams) (ObservationsStation, error) {
	row := q.db.QueryRow(ctx, updateStation,
		arg.Name,
		arg.Lat,
		arg.Lon,
		arg.Elevation,
		arg.DateInstalled,
		arg.MoStationID,
		arg.SmsSystemType,
		arg.MobileNumber,
		arg.StationType,
		arg.StationType2,
		arg.StationUrl,
		arg.Status,
		arg.LoggerVersion,
		arg.PriorityLevel,
		arg.ProviderID,
		arg.Province,
		arg.Region,
		arg.Address,
		arg.ID,
	)
	var i ObservationsStation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lat,
		&i.Lon,
		&i.Elevation,
		&i.DateInstalled,
		&i.MoStationID,
		&i.SmsSystemType,
		&i.MobileNumber,
		&i.StationType,
		&i.StationType2,
		&i.StationUrl,
		&i.Status,
		&i.LoggerVersion,
		&i.PriorityLevel,
		&i.ProviderID,
		&i.Province,
		&i.Region,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
