// Code generated by mockery v2.30.16. DO NOT EDIT.

package mockdb

import (
	context "context"

	db "github.com/emiliogozo/panahon-api-go/db/sqlc"
	mock "github.com/stretchr/testify/mock"

	util "github.com/emiliogozo/panahon-api-go/util"

	uuid "github.com/google/uuid"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// BatchCreateUserRoles provides a mock function with given fields: ctx, arg
func (_m *MockStore) BatchCreateUserRoles(ctx context.Context, arg []db.BatchCreateUserRolesParams) *db.BatchCreateUserRolesBatchResults {
	ret := _m.Called(ctx, arg)

	var r0 *db.BatchCreateUserRolesBatchResults
	if rf, ok := ret.Get(0).(func(context.Context, []db.BatchCreateUserRolesParams) *db.BatchCreateUserRolesBatchResults); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.BatchCreateUserRolesBatchResults)
		}
	}

	return r0
}

// MockStore_BatchCreateUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCreateUserRoles'
type MockStore_BatchCreateUserRoles_Call struct {
	*mock.Call
}

// BatchCreateUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []db.BatchCreateUserRolesParams
func (_e *MockStore_Expecter) BatchCreateUserRoles(ctx interface{}, arg interface{}) *MockStore_BatchCreateUserRoles_Call {
	return &MockStore_BatchCreateUserRoles_Call{Call: _e.mock.On("BatchCreateUserRoles", ctx, arg)}
}

func (_c *MockStore_BatchCreateUserRoles_Call) Run(run func(ctx context.Context, arg []db.BatchCreateUserRolesParams)) *MockStore_BatchCreateUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]db.BatchCreateUserRolesParams))
	})
	return _c
}

func (_c *MockStore_BatchCreateUserRoles_Call) Return(_a0 *db.BatchCreateUserRolesBatchResults) *MockStore_BatchCreateUserRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_BatchCreateUserRoles_Call) RunAndReturn(run func(context.Context, []db.BatchCreateUserRolesParams) *db.BatchCreateUserRolesBatchResults) *MockStore_BatchCreateUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// BatchDeleteUserRoles provides a mock function with given fields: ctx, arg
func (_m *MockStore) BatchDeleteUserRoles(ctx context.Context, arg []db.BatchDeleteUserRolesParams) *db.BatchDeleteUserRolesBatchResults {
	ret := _m.Called(ctx, arg)

	var r0 *db.BatchDeleteUserRolesBatchResults
	if rf, ok := ret.Get(0).(func(context.Context, []db.BatchDeleteUserRolesParams) *db.BatchDeleteUserRolesBatchResults); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.BatchDeleteUserRolesBatchResults)
		}
	}

	return r0
}

// MockStore_BatchDeleteUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchDeleteUserRoles'
type MockStore_BatchDeleteUserRoles_Call struct {
	*mock.Call
}

// BatchDeleteUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []db.BatchDeleteUserRolesParams
func (_e *MockStore_Expecter) BatchDeleteUserRoles(ctx interface{}, arg interface{}) *MockStore_BatchDeleteUserRoles_Call {
	return &MockStore_BatchDeleteUserRoles_Call{Call: _e.mock.On("BatchDeleteUserRoles", ctx, arg)}
}

func (_c *MockStore_BatchDeleteUserRoles_Call) Run(run func(ctx context.Context, arg []db.BatchDeleteUserRolesParams)) *MockStore_BatchDeleteUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]db.BatchDeleteUserRolesParams))
	})
	return _c
}

func (_c *MockStore_BatchDeleteUserRoles_Call) Return(_a0 *db.BatchDeleteUserRolesBatchResults) *MockStore_BatchDeleteUserRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_BatchDeleteUserRoles_Call) RunAndReturn(run func(context.Context, []db.BatchDeleteUserRolesParams) *db.BatchDeleteUserRolesBatchResults) *MockStore_BatchDeleteUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// BulkCreateUserRoles provides a mock function with given fields: ctx, arg
func (_m *MockStore) BulkCreateUserRoles(ctx context.Context, arg []db.UserRolesParams) ([]db.UserRolesParams, []error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.UserRolesParams
	var r1 []error
	if rf, ok := ret.Get(0).(func(context.Context, []db.UserRolesParams) ([]db.UserRolesParams, []error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []db.UserRolesParams) []db.UserRolesParams); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.UserRolesParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []db.UserRolesParams) []error); ok {
		r1 = rf(ctx, arg)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]error)
		}
	}

	return r0, r1
}

// MockStore_BulkCreateUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkCreateUserRoles'
type MockStore_BulkCreateUserRoles_Call struct {
	*mock.Call
}

// BulkCreateUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []db.UserRolesParams
func (_e *MockStore_Expecter) BulkCreateUserRoles(ctx interface{}, arg interface{}) *MockStore_BulkCreateUserRoles_Call {
	return &MockStore_BulkCreateUserRoles_Call{Call: _e.mock.On("BulkCreateUserRoles", ctx, arg)}
}

func (_c *MockStore_BulkCreateUserRoles_Call) Run(run func(ctx context.Context, arg []db.UserRolesParams)) *MockStore_BulkCreateUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]db.UserRolesParams))
	})
	return _c
}

func (_c *MockStore_BulkCreateUserRoles_Call) Return(ret []db.UserRolesParams, errs []error) *MockStore_BulkCreateUserRoles_Call {
	_c.Call.Return(ret, errs)
	return _c
}

func (_c *MockStore_BulkCreateUserRoles_Call) RunAndReturn(run func(context.Context, []db.UserRolesParams) ([]db.UserRolesParams, []error)) *MockStore_BulkCreateUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// BulkDeleteUserRoles provides a mock function with given fields: ctx, arg
func (_m *MockStore) BulkDeleteUserRoles(ctx context.Context, arg []db.UserRolesParams) []error {
	ret := _m.Called(ctx, arg)

	var r0 []error
	if rf, ok := ret.Get(0).(func(context.Context, []db.UserRolesParams) []error); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// MockStore_BulkDeleteUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDeleteUserRoles'
type MockStore_BulkDeleteUserRoles_Call struct {
	*mock.Call
}

// BulkDeleteUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []db.UserRolesParams
func (_e *MockStore_Expecter) BulkDeleteUserRoles(ctx interface{}, arg interface{}) *MockStore_BulkDeleteUserRoles_Call {
	return &MockStore_BulkDeleteUserRoles_Call{Call: _e.mock.On("BulkDeleteUserRoles", ctx, arg)}
}

func (_c *MockStore_BulkDeleteUserRoles_Call) Run(run func(ctx context.Context, arg []db.UserRolesParams)) *MockStore_BulkDeleteUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]db.UserRolesParams))
	})
	return _c
}

func (_c *MockStore_BulkDeleteUserRoles_Call) Return(_a0 []error) *MockStore_BulkDeleteUserRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_BulkDeleteUserRoles_Call) RunAndReturn(run func(context.Context, []db.UserRolesParams) []error) *MockStore_BulkDeleteUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGLabsLoad provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateGLabsLoad(ctx context.Context, arg db.CreateGLabsLoadParams) (db.GlabsLoad, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.GlabsLoad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateGLabsLoadParams) (db.GlabsLoad, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateGLabsLoadParams) db.GlabsLoad); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.GlabsLoad)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateGLabsLoadParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateGLabsLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGLabsLoad'
type MockStore_CreateGLabsLoad_Call struct {
	*mock.Call
}

// CreateGLabsLoad is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateGLabsLoadParams
func (_e *MockStore_Expecter) CreateGLabsLoad(ctx interface{}, arg interface{}) *MockStore_CreateGLabsLoad_Call {
	return &MockStore_CreateGLabsLoad_Call{Call: _e.mock.On("CreateGLabsLoad", ctx, arg)}
}

func (_c *MockStore_CreateGLabsLoad_Call) Run(run func(ctx context.Context, arg db.CreateGLabsLoadParams)) *MockStore_CreateGLabsLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateGLabsLoadParams))
	})
	return _c
}

func (_c *MockStore_CreateGLabsLoad_Call) Return(_a0 db.GlabsLoad, _a1 error) *MockStore_CreateGLabsLoad_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateGLabsLoad_Call) RunAndReturn(run func(context.Context, db.CreateGLabsLoadParams) (db.GlabsLoad, error)) *MockStore_CreateGLabsLoad_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateRole(ctx context.Context, arg db.CreateRoleParams) (db.Role, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateRoleParams) (db.Role, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateRoleParams) db.Role); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateRoleParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type MockStore_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateRoleParams
func (_e *MockStore_Expecter) CreateRole(ctx interface{}, arg interface{}) *MockStore_CreateRole_Call {
	return &MockStore_CreateRole_Call{Call: _e.mock.On("CreateRole", ctx, arg)}
}

func (_c *MockStore_CreateRole_Call) Run(run func(ctx context.Context, arg db.CreateRoleParams)) *MockStore_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateRoleParams))
	})
	return _c
}

func (_c *MockStore_CreateRole_Call) Return(_a0 db.Role, _a1 error) *MockStore_CreateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateRole_Call) RunAndReturn(run func(context.Context, db.CreateRoleParams) (db.Role, error)) *MockStore_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSession provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateSession(ctx context.Context, arg db.CreateSessionParams) (db.Session, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateSessionParams) (db.Session, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateSessionParams) db.Session); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateSessionParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockStore_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateSessionParams
func (_e *MockStore_Expecter) CreateSession(ctx interface{}, arg interface{}) *MockStore_CreateSession_Call {
	return &MockStore_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, arg)}
}

func (_c *MockStore_CreateSession_Call) Run(run func(ctx context.Context, arg db.CreateSessionParams)) *MockStore_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateSessionParams))
	})
	return _c
}

func (_c *MockStore_CreateSession_Call) Return(_a0 db.Session, _a1 error) *MockStore_CreateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateSession_Call) RunAndReturn(run func(context.Context, db.CreateSessionParams) (db.Session, error)) *MockStore_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSimAccessToken provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateSimAccessToken(ctx context.Context, arg db.CreateSimAccessTokenParams) (db.SimAccessToken, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.SimAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateSimAccessTokenParams) (db.SimAccessToken, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateSimAccessTokenParams) db.SimAccessToken); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.SimAccessToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateSimAccessTokenParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateSimAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSimAccessToken'
type MockStore_CreateSimAccessToken_Call struct {
	*mock.Call
}

// CreateSimAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateSimAccessTokenParams
func (_e *MockStore_Expecter) CreateSimAccessToken(ctx interface{}, arg interface{}) *MockStore_CreateSimAccessToken_Call {
	return &MockStore_CreateSimAccessToken_Call{Call: _e.mock.On("CreateSimAccessToken", ctx, arg)}
}

func (_c *MockStore_CreateSimAccessToken_Call) Run(run func(ctx context.Context, arg db.CreateSimAccessTokenParams)) *MockStore_CreateSimAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateSimAccessTokenParams))
	})
	return _c
}

func (_c *MockStore_CreateSimAccessToken_Call) Return(_a0 db.SimAccessToken, _a1 error) *MockStore_CreateSimAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateSimAccessToken_Call) RunAndReturn(run func(context.Context, db.CreateSimAccessTokenParams) (db.SimAccessToken, error)) *MockStore_CreateSimAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSimCard provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateSimCard(ctx context.Context, arg db.CreateSimCardParams) (db.SimCard, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.SimCard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateSimCardParams) (db.SimCard, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateSimCardParams) db.SimCard); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.SimCard)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateSimCardParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateSimCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSimCard'
type MockStore_CreateSimCard_Call struct {
	*mock.Call
}

// CreateSimCard is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateSimCardParams
func (_e *MockStore_Expecter) CreateSimCard(ctx interface{}, arg interface{}) *MockStore_CreateSimCard_Call {
	return &MockStore_CreateSimCard_Call{Call: _e.mock.On("CreateSimCard", ctx, arg)}
}

func (_c *MockStore_CreateSimCard_Call) Run(run func(ctx context.Context, arg db.CreateSimCardParams)) *MockStore_CreateSimCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateSimCardParams))
	})
	return _c
}

func (_c *MockStore_CreateSimCard_Call) Return(_a0 db.SimCard, _a1 error) *MockStore_CreateSimCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateSimCard_Call) RunAndReturn(run func(context.Context, db.CreateSimCardParams) (db.SimCard, error)) *MockStore_CreateSimCard_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStation provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateStation(ctx context.Context, arg db.CreateStationParams) (db.ObservationsStation, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.ObservationsStation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateStationParams) (db.ObservationsStation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateStationParams) db.ObservationsStation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.ObservationsStation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateStationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateStation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStation'
type MockStore_CreateStation_Call struct {
	*mock.Call
}

// CreateStation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateStationParams
func (_e *MockStore_Expecter) CreateStation(ctx interface{}, arg interface{}) *MockStore_CreateStation_Call {
	return &MockStore_CreateStation_Call{Call: _e.mock.On("CreateStation", ctx, arg)}
}

func (_c *MockStore_CreateStation_Call) Run(run func(ctx context.Context, arg db.CreateStationParams)) *MockStore_CreateStation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateStationParams))
	})
	return _c
}

func (_c *MockStore_CreateStation_Call) Return(_a0 db.ObservationsStation, _a1 error) *MockStore_CreateStation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateStation_Call) RunAndReturn(run func(context.Context, db.CreateStationParams) (db.ObservationsStation, error)) *MockStore_CreateStation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStationHealth provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateStationHealth(ctx context.Context, arg db.CreateStationHealthParams) (db.ObservationsStationhealth, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.ObservationsStationhealth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateStationHealthParams) (db.ObservationsStationhealth, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateStationHealthParams) db.ObservationsStationhealth); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.ObservationsStationhealth)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateStationHealthParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateStationHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStationHealth'
type MockStore_CreateStationHealth_Call struct {
	*mock.Call
}

// CreateStationHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateStationHealthParams
func (_e *MockStore_Expecter) CreateStationHealth(ctx interface{}, arg interface{}) *MockStore_CreateStationHealth_Call {
	return &MockStore_CreateStationHealth_Call{Call: _e.mock.On("CreateStationHealth", ctx, arg)}
}

func (_c *MockStore_CreateStationHealth_Call) Run(run func(ctx context.Context, arg db.CreateStationHealthParams)) *MockStore_CreateStationHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateStationHealthParams))
	})
	return _c
}

func (_c *MockStore_CreateStationHealth_Call) Return(_a0 db.ObservationsStationhealth, _a1 error) *MockStore_CreateStationHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateStationHealth_Call) RunAndReturn(run func(context.Context, db.CreateStationHealthParams) (db.ObservationsStationhealth, error)) *MockStore_CreateStationHealth_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStationObservation provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateStationObservation(ctx context.Context, arg db.CreateStationObservationParams) (db.ObservationsObservation, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.ObservationsObservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateStationObservationParams) (db.ObservationsObservation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateStationObservationParams) db.ObservationsObservation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.ObservationsObservation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateStationObservationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateStationObservation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStationObservation'
type MockStore_CreateStationObservation_Call struct {
	*mock.Call
}

// CreateStationObservation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateStationObservationParams
func (_e *MockStore_Expecter) CreateStationObservation(ctx interface{}, arg interface{}) *MockStore_CreateStationObservation_Call {
	return &MockStore_CreateStationObservation_Call{Call: _e.mock.On("CreateStationObservation", ctx, arg)}
}

func (_c *MockStore_CreateStationObservation_Call) Run(run func(ctx context.Context, arg db.CreateStationObservationParams)) *MockStore_CreateStationObservation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateStationObservationParams))
	})
	return _c
}

func (_c *MockStore_CreateStationObservation_Call) Return(_a0 db.ObservationsObservation, _a1 error) *MockStore_CreateStationObservation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateStationObservation_Call) RunAndReturn(run func(context.Context, db.CreateStationObservationParams) (db.ObservationsObservation, error)) *MockStore_CreateStationObservation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) (db.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) db.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockStore_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateUserParams
func (_e *MockStore_Expecter) CreateUser(ctx interface{}, arg interface{}) *MockStore_CreateUser_Call {
	return &MockStore_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *MockStore_CreateUser_Call) Run(run func(ctx context.Context, arg db.CreateUserParams)) *MockStore_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateUserParams))
	})
	return _c
}

func (_c *MockStore_CreateUser_Call) Return(_a0 db.User, _a1 error) *MockStore_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateUser_Call) RunAndReturn(run func(context.Context, db.CreateUserParams) (db.User, error)) *MockStore_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteRole(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type MockStore_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockStore_Expecter) DeleteRole(ctx interface{}, id interface{}) *MockStore_DeleteRole_Call {
	return &MockStore_DeleteRole_Call{Call: _e.mock.On("DeleteRole", ctx, id)}
}

func (_c *MockStore_DeleteRole_Call) Run(run func(ctx context.Context, id int64)) *MockStore_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_DeleteRole_Call) Return(_a0 error) *MockStore_DeleteRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteRole_Call) RunAndReturn(run func(context.Context, int64) error) *MockStore_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStation provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteStation(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteStation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStation'
type MockStore_DeleteStation_Call struct {
	*mock.Call
}

// DeleteStation is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockStore_Expecter) DeleteStation(ctx interface{}, id interface{}) *MockStore_DeleteStation_Call {
	return &MockStore_DeleteStation_Call{Call: _e.mock.On("DeleteStation", ctx, id)}
}

func (_c *MockStore_DeleteStation_Call) Run(run func(ctx context.Context, id int64)) *MockStore_DeleteStation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_DeleteStation_Call) Return(_a0 error) *MockStore_DeleteStation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteStation_Call) RunAndReturn(run func(context.Context, int64) error) *MockStore_DeleteStation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStationHealth provides a mock function with given fields: ctx, arg
func (_m *MockStore) DeleteStationHealth(ctx context.Context, arg db.DeleteStationHealthParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.DeleteStationHealthParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteStationHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStationHealth'
type MockStore_DeleteStationHealth_Call struct {
	*mock.Call
}

// DeleteStationHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.DeleteStationHealthParams
func (_e *MockStore_Expecter) DeleteStationHealth(ctx interface{}, arg interface{}) *MockStore_DeleteStationHealth_Call {
	return &MockStore_DeleteStationHealth_Call{Call: _e.mock.On("DeleteStationHealth", ctx, arg)}
}

func (_c *MockStore_DeleteStationHealth_Call) Run(run func(ctx context.Context, arg db.DeleteStationHealthParams)) *MockStore_DeleteStationHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.DeleteStationHealthParams))
	})
	return _c
}

func (_c *MockStore_DeleteStationHealth_Call) Return(_a0 error) *MockStore_DeleteStationHealth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteStationHealth_Call) RunAndReturn(run func(context.Context, db.DeleteStationHealthParams) error) *MockStore_DeleteStationHealth_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStationObservation provides a mock function with given fields: ctx, arg
func (_m *MockStore) DeleteStationObservation(ctx context.Context, arg db.DeleteStationObservationParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.DeleteStationObservationParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteStationObservation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStationObservation'
type MockStore_DeleteStationObservation_Call struct {
	*mock.Call
}

// DeleteStationObservation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.DeleteStationObservationParams
func (_e *MockStore_Expecter) DeleteStationObservation(ctx interface{}, arg interface{}) *MockStore_DeleteStationObservation_Call {
	return &MockStore_DeleteStationObservation_Call{Call: _e.mock.On("DeleteStationObservation", ctx, arg)}
}

func (_c *MockStore_DeleteStationObservation_Call) Run(run func(ctx context.Context, arg db.DeleteStationObservationParams)) *MockStore_DeleteStationObservation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.DeleteStationObservationParams))
	})
	return _c
}

func (_c *MockStore_DeleteStationObservation_Call) Return(_a0 error) *MockStore_DeleteStationObservation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteStationObservation_Call) RunAndReturn(run func(context.Context, db.DeleteStationObservationParams) error) *MockStore_DeleteStationObservation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteUser(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockStore_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockStore_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockStore_DeleteUser_Call {
	return &MockStore_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockStore_DeleteUser_Call) Run(run func(ctx context.Context, id int64)) *MockStore_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_DeleteUser_Call) Return(_a0 error) *MockStore_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteUser_Call) RunAndReturn(run func(context.Context, int64) error) *MockStore_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// FirstOrCreateSimAccessTokenTx provides a mock function with given fields: ctx, arg
func (_m *MockStore) FirstOrCreateSimAccessTokenTx(ctx context.Context, arg db.FirstOrCreateSimAccessTokenTxParams) (db.FirstOrCreateSimAccessTokenTxResult, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.FirstOrCreateSimAccessTokenTxResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.FirstOrCreateSimAccessTokenTxParams) (db.FirstOrCreateSimAccessTokenTxResult, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.FirstOrCreateSimAccessTokenTxParams) db.FirstOrCreateSimAccessTokenTxResult); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.FirstOrCreateSimAccessTokenTxResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.FirstOrCreateSimAccessTokenTxParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_FirstOrCreateSimAccessTokenTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstOrCreateSimAccessTokenTx'
type MockStore_FirstOrCreateSimAccessTokenTx_Call struct {
	*mock.Call
}

// FirstOrCreateSimAccessTokenTx is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.FirstOrCreateSimAccessTokenTxParams
func (_e *MockStore_Expecter) FirstOrCreateSimAccessTokenTx(ctx interface{}, arg interface{}) *MockStore_FirstOrCreateSimAccessTokenTx_Call {
	return &MockStore_FirstOrCreateSimAccessTokenTx_Call{Call: _e.mock.On("FirstOrCreateSimAccessTokenTx", ctx, arg)}
}

func (_c *MockStore_FirstOrCreateSimAccessTokenTx_Call) Run(run func(ctx context.Context, arg db.FirstOrCreateSimAccessTokenTxParams)) *MockStore_FirstOrCreateSimAccessTokenTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.FirstOrCreateSimAccessTokenTxParams))
	})
	return _c
}

func (_c *MockStore_FirstOrCreateSimAccessTokenTx_Call) Return(_a0 db.FirstOrCreateSimAccessTokenTxResult, _a1 error) *MockStore_FirstOrCreateSimAccessTokenTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_FirstOrCreateSimAccessTokenTx_Call) RunAndReturn(run func(context.Context, db.FirstOrCreateSimAccessTokenTxParams) (db.FirstOrCreateSimAccessTokenTxResult, error)) *MockStore_FirstOrCreateSimAccessTokenTx_Call {
	_c.Call.Return(run)
	return _c
}

// GetRole provides a mock function with given fields: ctx, id
func (_m *MockStore) GetRole(ctx context.Context, id int64) (db.Role, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Role, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Role); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRole'
type MockStore_GetRole_Call struct {
	*mock.Call
}

// GetRole is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockStore_Expecter) GetRole(ctx interface{}, id interface{}) *MockStore_GetRole_Call {
	return &MockStore_GetRole_Call{Call: _e.mock.On("GetRole", ctx, id)}
}

func (_c *MockStore_GetRole_Call) Run(run func(ctx context.Context, id int64)) *MockStore_GetRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_GetRole_Call) Return(_a0 db.Role, _a1 error) *MockStore_GetRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetRole_Call) RunAndReturn(run func(context.Context, int64) (db.Role, error)) *MockStore_GetRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleByName provides a mock function with given fields: ctx, name
func (_m *MockStore) GetRoleByName(ctx context.Context, name string) (db.Role, error) {
	ret := _m.Called(ctx, name)

	var r0 db.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.Role, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Role); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(db.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetRoleByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleByName'
type MockStore_GetRoleByName_Call struct {
	*mock.Call
}

// GetRoleByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockStore_Expecter) GetRoleByName(ctx interface{}, name interface{}) *MockStore_GetRoleByName_Call {
	return &MockStore_GetRoleByName_Call{Call: _e.mock.On("GetRoleByName", ctx, name)}
}

func (_c *MockStore_GetRoleByName_Call) Run(run func(ctx context.Context, name string)) *MockStore_GetRoleByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetRoleByName_Call) Return(_a0 db.Role, _a1 error) *MockStore_GetRoleByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetRoleByName_Call) RunAndReturn(run func(context.Context, string) (db.Role, error)) *MockStore_GetRoleByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetSession provides a mock function with given fields: ctx, id
func (_m *MockStore) GetSession(ctx context.Context, id uuid.UUID) (db.Session, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Session, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Session); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type MockStore_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockStore_Expecter) GetSession(ctx interface{}, id interface{}) *MockStore_GetSession_Call {
	return &MockStore_GetSession_Call{Call: _e.mock.On("GetSession", ctx, id)}
}

func (_c *MockStore_GetSession_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStore_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetSession_Call) Return(_a0 db.Session, _a1 error) *MockStore_GetSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetSession_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.Session, error)) *MockStore_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetSimAccessToken provides a mock function with given fields: ctx, accessToken
func (_m *MockStore) GetSimAccessToken(ctx context.Context, accessToken string) (db.SimAccessToken, error) {
	ret := _m.Called(ctx, accessToken)

	var r0 db.SimAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.SimAccessToken, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.SimAccessToken); ok {
		r0 = rf(ctx, accessToken)
	} else {
		r0 = ret.Get(0).(db.SimAccessToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetSimAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSimAccessToken'
type MockStore_GetSimAccessToken_Call struct {
	*mock.Call
}

// GetSimAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
func (_e *MockStore_Expecter) GetSimAccessToken(ctx interface{}, accessToken interface{}) *MockStore_GetSimAccessToken_Call {
	return &MockStore_GetSimAccessToken_Call{Call: _e.mock.On("GetSimAccessToken", ctx, accessToken)}
}

func (_c *MockStore_GetSimAccessToken_Call) Run(run func(ctx context.Context, accessToken string)) *MockStore_GetSimAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetSimAccessToken_Call) Return(_a0 db.SimAccessToken, _a1 error) *MockStore_GetSimAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetSimAccessToken_Call) RunAndReturn(run func(context.Context, string) (db.SimAccessToken, error)) *MockStore_GetSimAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetSimCard provides a mock function with given fields: ctx, mobileNumber
func (_m *MockStore) GetSimCard(ctx context.Context, mobileNumber string) (db.SimCard, error) {
	ret := _m.Called(ctx, mobileNumber)

	var r0 db.SimCard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.SimCard, error)); ok {
		return rf(ctx, mobileNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.SimCard); ok {
		r0 = rf(ctx, mobileNumber)
	} else {
		r0 = ret.Get(0).(db.SimCard)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, mobileNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetSimCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSimCard'
type MockStore_GetSimCard_Call struct {
	*mock.Call
}

// GetSimCard is a helper method to define mock.On call
//   - ctx context.Context
//   - mobileNumber string
func (_e *MockStore_Expecter) GetSimCard(ctx interface{}, mobileNumber interface{}) *MockStore_GetSimCard_Call {
	return &MockStore_GetSimCard_Call{Call: _e.mock.On("GetSimCard", ctx, mobileNumber)}
}

func (_c *MockStore_GetSimCard_Call) Run(run func(ctx context.Context, mobileNumber string)) *MockStore_GetSimCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetSimCard_Call) Return(_a0 db.SimCard, _a1 error) *MockStore_GetSimCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetSimCard_Call) RunAndReturn(run func(context.Context, string) (db.SimCard, error)) *MockStore_GetSimCard_Call {
	_c.Call.Return(run)
	return _c
}

// GetStation provides a mock function with given fields: ctx, id
func (_m *MockStore) GetStation(ctx context.Context, id int64) (db.ObservationsStation, error) {
	ret := _m.Called(ctx, id)

	var r0 db.ObservationsStation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.ObservationsStation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.ObservationsStation); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.ObservationsStation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetStation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStation'
type MockStore_GetStation_Call struct {
	*mock.Call
}

// GetStation is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockStore_Expecter) GetStation(ctx interface{}, id interface{}) *MockStore_GetStation_Call {
	return &MockStore_GetStation_Call{Call: _e.mock.On("GetStation", ctx, id)}
}

func (_c *MockStore_GetStation_Call) Run(run func(ctx context.Context, id int64)) *MockStore_GetStation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_GetStation_Call) Return(_a0 db.ObservationsStation, _a1 error) *MockStore_GetStation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetStation_Call) RunAndReturn(run func(context.Context, int64) (db.ObservationsStation, error)) *MockStore_GetStation_Call {
	_c.Call.Return(run)
	return _c
}

// GetStationByMobileNumber provides a mock function with given fields: ctx, mobileNumber
func (_m *MockStore) GetStationByMobileNumber(ctx context.Context, mobileNumber util.NullString) (db.ObservationsStation, error) {
	ret := _m.Called(ctx, mobileNumber)

	var r0 db.ObservationsStation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, util.NullString) (db.ObservationsStation, error)); ok {
		return rf(ctx, mobileNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, util.NullString) db.ObservationsStation); ok {
		r0 = rf(ctx, mobileNumber)
	} else {
		r0 = ret.Get(0).(db.ObservationsStation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, util.NullString) error); ok {
		r1 = rf(ctx, mobileNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetStationByMobileNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStationByMobileNumber'
type MockStore_GetStationByMobileNumber_Call struct {
	*mock.Call
}

// GetStationByMobileNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - mobileNumber util.NullString
func (_e *MockStore_Expecter) GetStationByMobileNumber(ctx interface{}, mobileNumber interface{}) *MockStore_GetStationByMobileNumber_Call {
	return &MockStore_GetStationByMobileNumber_Call{Call: _e.mock.On("GetStationByMobileNumber", ctx, mobileNumber)}
}

func (_c *MockStore_GetStationByMobileNumber_Call) Run(run func(ctx context.Context, mobileNumber util.NullString)) *MockStore_GetStationByMobileNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(util.NullString))
	})
	return _c
}

func (_c *MockStore_GetStationByMobileNumber_Call) Return(_a0 db.ObservationsStation, _a1 error) *MockStore_GetStationByMobileNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetStationByMobileNumber_Call) RunAndReturn(run func(context.Context, util.NullString) (db.ObservationsStation, error)) *MockStore_GetStationByMobileNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetStationHealth provides a mock function with given fields: ctx, arg
func (_m *MockStore) GetStationHealth(ctx context.Context, arg db.GetStationHealthParams) (db.ObservationsStationhealth, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.ObservationsStationhealth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetStationHealthParams) (db.ObservationsStationhealth, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetStationHealthParams) db.ObservationsStationhealth); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.ObservationsStationhealth)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetStationHealthParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetStationHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStationHealth'
type MockStore_GetStationHealth_Call struct {
	*mock.Call
}

// GetStationHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetStationHealthParams
func (_e *MockStore_Expecter) GetStationHealth(ctx interface{}, arg interface{}) *MockStore_GetStationHealth_Call {
	return &MockStore_GetStationHealth_Call{Call: _e.mock.On("GetStationHealth", ctx, arg)}
}

func (_c *MockStore_GetStationHealth_Call) Run(run func(ctx context.Context, arg db.GetStationHealthParams)) *MockStore_GetStationHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetStationHealthParams))
	})
	return _c
}

func (_c *MockStore_GetStationHealth_Call) Return(_a0 db.ObservationsStationhealth, _a1 error) *MockStore_GetStationHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetStationHealth_Call) RunAndReturn(run func(context.Context, db.GetStationHealthParams) (db.ObservationsStationhealth, error)) *MockStore_GetStationHealth_Call {
	_c.Call.Return(run)
	return _c
}

// GetStationObservation provides a mock function with given fields: ctx, arg
func (_m *MockStore) GetStationObservation(ctx context.Context, arg db.GetStationObservationParams) (db.ObservationsObservation, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.ObservationsObservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetStationObservationParams) (db.ObservationsObservation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetStationObservationParams) db.ObservationsObservation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.ObservationsObservation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetStationObservationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetStationObservation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStationObservation'
type MockStore_GetStationObservation_Call struct {
	*mock.Call
}

// GetStationObservation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetStationObservationParams
func (_e *MockStore_Expecter) GetStationObservation(ctx interface{}, arg interface{}) *MockStore_GetStationObservation_Call {
	return &MockStore_GetStationObservation_Call{Call: _e.mock.On("GetStationObservation", ctx, arg)}
}

func (_c *MockStore_GetStationObservation_Call) Run(run func(ctx context.Context, arg db.GetStationObservationParams)) *MockStore_GetStationObservation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetStationObservationParams))
	})
	return _c
}

func (_c *MockStore_GetStationObservation_Call) Return(_a0 db.ObservationsObservation, _a1 error) *MockStore_GetStationObservation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetStationObservation_Call) RunAndReturn(run func(context.Context, db.GetStationObservationParams) (db.ObservationsObservation, error)) *MockStore_GetStationObservation_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *MockStore) GetUser(ctx context.Context, id int64) (db.User, error) {
	ret := _m.Called(ctx, id)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockStore_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockStore_Expecter) GetUser(ctx interface{}, id interface{}) *MockStore_GetUser_Call {
	return &MockStore_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockStore_GetUser_Call) Run(run func(ctx context.Context, id int64)) *MockStore_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_GetUser_Call) Return(_a0 db.User, _a1 error) *MockStore_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetUser_Call) RunAndReturn(run func(context.Context, int64) (db.User, error)) *MockStore_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockStore) GetUserByEmail(ctx context.Context, email string) (db.User, error) {
	ret := _m.Called(ctx, email)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockStore_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockStore_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockStore_GetUserByEmail_Call {
	return &MockStore_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockStore_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockStore_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetUserByEmail_Call) Return(_a0 db.User, _a1 error) *MockStore_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (db.User, error)) *MockStore_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *MockStore) GetUserByUsername(ctx context.Context, username string) (db.User, error) {
	ret := _m.Called(ctx, username)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockStore_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockStore_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *MockStore_GetUserByUsername_Call {
	return &MockStore_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *MockStore_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockStore_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetUserByUsername_Call) Return(_a0 db.User, _a1 error) *MockStore_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) (db.User, error)) *MockStore_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// ListLufftStationMsg provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListLufftStationMsg(ctx context.Context, arg db.ListLufftStationMsgParams) ([]db.ListLufftStationMsgRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.ListLufftStationMsgRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListLufftStationMsgParams) ([]db.ListLufftStationMsgRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListLufftStationMsgParams) []db.ListLufftStationMsgRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.ListLufftStationMsgRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListLufftStationMsgParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListLufftStationMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLufftStationMsg'
type MockStore_ListLufftStationMsg_Call struct {
	*mock.Call
}

// ListLufftStationMsg is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.ListLufftStationMsgParams
func (_e *MockStore_Expecter) ListLufftStationMsg(ctx interface{}, arg interface{}) *MockStore_ListLufftStationMsg_Call {
	return &MockStore_ListLufftStationMsg_Call{Call: _e.mock.On("ListLufftStationMsg", ctx, arg)}
}

func (_c *MockStore_ListLufftStationMsg_Call) Run(run func(ctx context.Context, arg db.ListLufftStationMsgParams)) *MockStore_ListLufftStationMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListLufftStationMsgParams))
	})
	return _c
}

func (_c *MockStore_ListLufftStationMsg_Call) Return(_a0 []db.ListLufftStationMsgRow, _a1 error) *MockStore_ListLufftStationMsg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListLufftStationMsg_Call) RunAndReturn(run func(context.Context, db.ListLufftStationMsgParams) ([]db.ListLufftStationMsgRow, error)) *MockStore_ListLufftStationMsg_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoles provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListRoles(ctx context.Context, arg db.ListRolesParams) ([]db.Role, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListRolesParams) ([]db.Role, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListRolesParams) []db.Role); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListRolesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoles'
type MockStore_ListRoles_Call struct {
	*mock.Call
}

// ListRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.ListRolesParams
func (_e *MockStore_Expecter) ListRoles(ctx interface{}, arg interface{}) *MockStore_ListRoles_Call {
	return &MockStore_ListRoles_Call{Call: _e.mock.On("ListRoles", ctx, arg)}
}

func (_c *MockStore_ListRoles_Call) Run(run func(ctx context.Context, arg db.ListRolesParams)) *MockStore_ListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListRolesParams))
	})
	return _c
}

func (_c *MockStore_ListRoles_Call) Return(_a0 []db.Role, _a1 error) *MockStore_ListRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListRoles_Call) RunAndReturn(run func(context.Context, db.ListRolesParams) ([]db.Role, error)) *MockStore_ListRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListStationHealths provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListStationHealths(ctx context.Context, arg db.ListStationHealthsParams) ([]db.ObservationsStationhealth, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.ObservationsStationhealth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListStationHealthsParams) ([]db.ObservationsStationhealth, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListStationHealthsParams) []db.ObservationsStationhealth); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.ObservationsStationhealth)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListStationHealthsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListStationHealths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStationHealths'
type MockStore_ListStationHealths_Call struct {
	*mock.Call
}

// ListStationHealths is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.ListStationHealthsParams
func (_e *MockStore_Expecter) ListStationHealths(ctx interface{}, arg interface{}) *MockStore_ListStationHealths_Call {
	return &MockStore_ListStationHealths_Call{Call: _e.mock.On("ListStationHealths", ctx, arg)}
}

func (_c *MockStore_ListStationHealths_Call) Run(run func(ctx context.Context, arg db.ListStationHealthsParams)) *MockStore_ListStationHealths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListStationHealthsParams))
	})
	return _c
}

func (_c *MockStore_ListStationHealths_Call) Return(_a0 []db.ObservationsStationhealth, _a1 error) *MockStore_ListStationHealths_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListStationHealths_Call) RunAndReturn(run func(context.Context, db.ListStationHealthsParams) ([]db.ObservationsStationhealth, error)) *MockStore_ListStationHealths_Call {
	_c.Call.Return(run)
	return _c
}

// ListStationObservations provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListStationObservations(ctx context.Context, arg db.ListStationObservationsParams) ([]db.ObservationsObservation, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.ObservationsObservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListStationObservationsParams) ([]db.ObservationsObservation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListStationObservationsParams) []db.ObservationsObservation); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.ObservationsObservation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListStationObservationsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListStationObservations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStationObservations'
type MockStore_ListStationObservations_Call struct {
	*mock.Call
}

// ListStationObservations is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.ListStationObservationsParams
func (_e *MockStore_Expecter) ListStationObservations(ctx interface{}, arg interface{}) *MockStore_ListStationObservations_Call {
	return &MockStore_ListStationObservations_Call{Call: _e.mock.On("ListStationObservations", ctx, arg)}
}

func (_c *MockStore_ListStationObservations_Call) Run(run func(ctx context.Context, arg db.ListStationObservationsParams)) *MockStore_ListStationObservations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListStationObservationsParams))
	})
	return _c
}

func (_c *MockStore_ListStationObservations_Call) Return(_a0 []db.ObservationsObservation, _a1 error) *MockStore_ListStationObservations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListStationObservations_Call) RunAndReturn(run func(context.Context, db.ListStationObservationsParams) ([]db.ObservationsObservation, error)) *MockStore_ListStationObservations_Call {
	_c.Call.Return(run)
	return _c
}

// ListStations provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListStations(ctx context.Context, arg db.ListStationsParams) ([]db.ObservationsStation, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.ObservationsStation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListStationsParams) ([]db.ObservationsStation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListStationsParams) []db.ObservationsStation); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.ObservationsStation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListStationsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListStations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStations'
type MockStore_ListStations_Call struct {
	*mock.Call
}

// ListStations is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.ListStationsParams
func (_e *MockStore_Expecter) ListStations(ctx interface{}, arg interface{}) *MockStore_ListStations_Call {
	return &MockStore_ListStations_Call{Call: _e.mock.On("ListStations", ctx, arg)}
}

func (_c *MockStore_ListStations_Call) Run(run func(ctx context.Context, arg db.ListStationsParams)) *MockStore_ListStations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListStationsParams))
	})
	return _c
}

func (_c *MockStore_ListStations_Call) Return(_a0 []db.ObservationsStation, _a1 error) *MockStore_ListStations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListStations_Call) RunAndReturn(run func(context.Context, db.ListStationsParams) ([]db.ObservationsStation, error)) *MockStore_ListStations_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserRoles provides a mock function with given fields: ctx, userID
func (_m *MockStore) ListUserRoles(ctx context.Context, userID int64) ([]string, error) {
	ret := _m.Called(ctx, userID)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []string); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserRoles'
type MockStore_ListUserRoles_Call struct {
	*mock.Call
}

// ListUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockStore_Expecter) ListUserRoles(ctx interface{}, userID interface{}) *MockStore_ListUserRoles_Call {
	return &MockStore_ListUserRoles_Call{Call: _e.mock.On("ListUserRoles", ctx, userID)}
}

func (_c *MockStore_ListUserRoles_Call) Run(run func(ctx context.Context, userID int64)) *MockStore_ListUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_ListUserRoles_Call) Return(_a0 []string, _a1 error) *MockStore_ListUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListUserRoles_Call) RunAndReturn(run func(context.Context, int64) ([]string, error)) *MockStore_ListUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListUsers(ctx context.Context, arg db.ListUsersParams) ([]db.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListUsersParams) ([]db.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListUsersParams) []db.User); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListUsersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockStore_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.ListUsersParams
func (_e *MockStore_Expecter) ListUsers(ctx interface{}, arg interface{}) *MockStore_ListUsers_Call {
	return &MockStore_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, arg)}
}

func (_c *MockStore_ListUsers_Call) Run(run func(ctx context.Context, arg db.ListUsersParams)) *MockStore_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListUsersParams))
	})
	return _c
}

func (_c *MockStore_ListUsers_Call) Return(_a0 []db.User, _a1 error) *MockStore_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListUsers_Call) RunAndReturn(run func(context.Context, db.ListUsersParams) ([]db.User, error)) *MockStore_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateRole(ctx context.Context, arg db.UpdateRoleParams) (db.Role, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateRoleParams) (db.Role, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateRoleParams) db.Role); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateRoleParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type MockStore_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateRoleParams
func (_e *MockStore_Expecter) UpdateRole(ctx interface{}, arg interface{}) *MockStore_UpdateRole_Call {
	return &MockStore_UpdateRole_Call{Call: _e.mock.On("UpdateRole", ctx, arg)}
}

func (_c *MockStore_UpdateRole_Call) Run(run func(ctx context.Context, arg db.UpdateRoleParams)) *MockStore_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateRoleParams))
	})
	return _c
}

func (_c *MockStore_UpdateRole_Call) Return(_a0 db.Role, _a1 error) *MockStore_UpdateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateRole_Call) RunAndReturn(run func(context.Context, db.UpdateRoleParams) (db.Role, error)) *MockStore_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStation provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateStation(ctx context.Context, arg db.UpdateStationParams) (db.ObservationsStation, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.ObservationsStation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateStationParams) (db.ObservationsStation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateStationParams) db.ObservationsStation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.ObservationsStation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateStationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateStation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStation'
type MockStore_UpdateStation_Call struct {
	*mock.Call
}

// UpdateStation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateStationParams
func (_e *MockStore_Expecter) UpdateStation(ctx interface{}, arg interface{}) *MockStore_UpdateStation_Call {
	return &MockStore_UpdateStation_Call{Call: _e.mock.On("UpdateStation", ctx, arg)}
}

func (_c *MockStore_UpdateStation_Call) Run(run func(ctx context.Context, arg db.UpdateStationParams)) *MockStore_UpdateStation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateStationParams))
	})
	return _c
}

func (_c *MockStore_UpdateStation_Call) Return(_a0 db.ObservationsStation, _a1 error) *MockStore_UpdateStation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateStation_Call) RunAndReturn(run func(context.Context, db.UpdateStationParams) (db.ObservationsStation, error)) *MockStore_UpdateStation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStationHealth provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateStationHealth(ctx context.Context, arg db.UpdateStationHealthParams) (db.ObservationsStationhealth, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.ObservationsStationhealth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateStationHealthParams) (db.ObservationsStationhealth, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateStationHealthParams) db.ObservationsStationhealth); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.ObservationsStationhealth)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateStationHealthParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateStationHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStationHealth'
type MockStore_UpdateStationHealth_Call struct {
	*mock.Call
}

// UpdateStationHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateStationHealthParams
func (_e *MockStore_Expecter) UpdateStationHealth(ctx interface{}, arg interface{}) *MockStore_UpdateStationHealth_Call {
	return &MockStore_UpdateStationHealth_Call{Call: _e.mock.On("UpdateStationHealth", ctx, arg)}
}

func (_c *MockStore_UpdateStationHealth_Call) Run(run func(ctx context.Context, arg db.UpdateStationHealthParams)) *MockStore_UpdateStationHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateStationHealthParams))
	})
	return _c
}

func (_c *MockStore_UpdateStationHealth_Call) Return(_a0 db.ObservationsStationhealth, _a1 error) *MockStore_UpdateStationHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateStationHealth_Call) RunAndReturn(run func(context.Context, db.UpdateStationHealthParams) (db.ObservationsStationhealth, error)) *MockStore_UpdateStationHealth_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStationObservation provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateStationObservation(ctx context.Context, arg db.UpdateStationObservationParams) (db.ObservationsObservation, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.ObservationsObservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateStationObservationParams) (db.ObservationsObservation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateStationObservationParams) db.ObservationsObservation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.ObservationsObservation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateStationObservationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateStationObservation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStationObservation'
type MockStore_UpdateStationObservation_Call struct {
	*mock.Call
}

// UpdateStationObservation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateStationObservationParams
func (_e *MockStore_Expecter) UpdateStationObservation(ctx interface{}, arg interface{}) *MockStore_UpdateStationObservation_Call {
	return &MockStore_UpdateStationObservation_Call{Call: _e.mock.On("UpdateStationObservation", ctx, arg)}
}

func (_c *MockStore_UpdateStationObservation_Call) Run(run func(ctx context.Context, arg db.UpdateStationObservationParams)) *MockStore_UpdateStationObservation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateStationObservationParams))
	})
	return _c
}

func (_c *MockStore_UpdateStationObservation_Call) Return(_a0 db.ObservationsObservation, _a1 error) *MockStore_UpdateStationObservation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateStationObservation_Call) RunAndReturn(run func(context.Context, db.UpdateStationObservationParams) (db.ObservationsObservation, error)) *MockStore_UpdateStationObservation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateUser(ctx context.Context, arg db.UpdateUserParams) (db.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateUserParams) (db.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateUserParams) db.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockStore_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateUserParams
func (_e *MockStore_Expecter) UpdateUser(ctx interface{}, arg interface{}) *MockStore_UpdateUser_Call {
	return &MockStore_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, arg)}
}

func (_c *MockStore_UpdateUser_Call) Run(run func(ctx context.Context, arg db.UpdateUserParams)) *MockStore_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateUserParams))
	})
	return _c
}

func (_c *MockStore_UpdateUser_Call) Return(_a0 db.User, _a1 error) *MockStore_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateUser_Call) RunAndReturn(run func(context.Context, db.UpdateUserParams) (db.User, error)) *MockStore_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
